@model ControleDeContas.Models.Tarefa

@{
    ViewData["Title"] = "Create";
}


<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Nome" class="control-label"></label>
                <input asp-for="Nome" class="form-control" />
                <span asp-validation-for="Nome" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Data" class="control-label"></label>
                <input id="data" oninput="formatarData(this)" maxlength="10" asp-for="Data" class="form-control" />
                <span asp-validation-for="Data" class="text-danger"></span>
            </div>

            <br></br>

            <div class="form-group">
                <input type="submit" value="Salvar" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<br></br>

<div>
    <a class="btn btn-secondary" asp-action="Index"> <i class='fas fa-backspace'></i> Voltar</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        function formatarData(input) {
            // Remove quaisquer barras existentes para garantir que haja apenas uma
            input.value = input.value.replace(/\//g, '');

            // Verifique o comprimento da entrada e insira as barras conforme necessário
            let formattedDate = input.value;
            if (formattedDate.length >= 2) {
                formattedDate = formattedDate.substring(0, 2) + '/' + formattedDate.substring(2);
            }
            if (formattedDate.length >= 5) {
                formattedDate = formattedDate.substring(0, 5) + '/' + formattedDate.substring(5);
            }

            // Atualize o valor do campo de entrada com a data formatada
            input.value = formattedDate;
        }

    </script>
}
